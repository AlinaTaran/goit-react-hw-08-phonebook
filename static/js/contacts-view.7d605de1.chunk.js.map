{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactItem/ContactItem.js","redux/contact/contacts-operation.js","redux/contact/contacts-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","ContactItem","name","number","onClick","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","addContact","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getContacts","state","contacts","items","getFilter","filter","filteredContacts","normalizedContact","toLowerCase","includes","ContactsList","useSelector","contactsSelectors","useDispatch","visibleContacts","length","map","contactsOperations","ContactForm","useForm","register","handleSubmit","errors","reset","control","className","s","form","onSubmit","existName","nameNormalized","find","isExistName","alert","label","input","ref","minLength","value","message","maxLength","required","type","as","InputMask","rules","defaultValue","placeholder","mask","button","Filter","onChange","event","contactsActions","changeFilter","target","ContactsView","useEffect","ContactList"],"mappings":"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","file":"static/js/contacts-view.7d605de1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3ccaS\",\"button\":\"ContactForm_button__1WblQ\"};","import PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ name, number, onClick }) => {\r\n  return (\r\n    <li>\r\n      <p>\r\n        {name}: {number}\r\n      </p>\r\n      <button onClick={onClick}>Delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import axios from 'axios';\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  deleteContactRequest,\r\n  deleteContactError,\r\n  deleteContactSuccess,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contacts-actions';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","// import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const filteredContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normalizedContact = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedContact),\r\n  );\r\n};\r\n","import PropTypes from 'prop-types';\r\n// import { useEffect } from 'react';\r\nimport ContactItem from '../ContactItem/ContactItem';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contact';\r\n\r\nconst ContactsList = () => {\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n  const visibleContacts = useSelector(contactsSelectors.filteredContacts);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 0 ? (\r\n        <ul>\r\n          {visibleContacts.map(({ id, name, number }) => (\r\n            <ContactItem\r\n              key={id}\r\n              name={name}\r\n              number={number}\r\n              onClick={() => dispatch(contactsOperations.deleteContact(id))}\r\n            />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No contacts have been added to your phonebook</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactsList;\r\n","import { useForm, Controller } from 'react-hook-form';\r\nimport InputMask from 'react-input-mask';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from 'redux/contact';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction ContactForm() {\r\n  const { register, handleSubmit, errors, reset, control } = useForm();\r\n\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const isExistName = existName => {\r\n    const nameNormalized = existName.toLowerCase();\r\n    return contacts.find(({ name }) => name.toLowerCase() === nameNormalized);\r\n  };\r\n\r\n  const submitHandler = ({ name, number }) => {\r\n    const sameName = isExistName(name);\r\n\r\n    if (sameName) {\r\n      alert(`${name} is already in your phonebook`);\r\n    } else {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n    }\r\n\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit(submitHandler)}>\r\n      <label className={s.label}>\r\n        Name\r\n        <input\r\n          className={s.input}\r\n          name=\"name\"\r\n          ref={register({\r\n            minLength: { value: 2, message: 'Too short name' },\r\n            maxLength: { value: 20, message: 'Too long name' },\r\n            required: 'Is a required field',\r\n          })}\r\n          type=\"text\"\r\n        />\r\n        {errors.name && <p className={s.errors}>{errors.name.message}</p>}\r\n      </label>\r\n\r\n      <label>\r\n        Number\r\n        <Controller\r\n          as={InputMask}\r\n          name=\"number\"\r\n          rules={{\r\n            required: 'Phone number is required',\r\n          }}\r\n          defaultValue=\"\"\r\n          control={control}\r\n          className={s.input}\r\n          placeholder=\"+38 (___) ___-__-__\"\r\n          mask=\"+38 (999) 999-99-99\"\r\n        />\r\n        {errors.number && <p className={s.errors}>{errors.number.message}</p>}\r\n      </label>\r\n\r\n      <button className={s.button} type=\"submit\">\r\n        Add to contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { contactsSelectors, contactsActions } from 'redux/contact';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(contactsSelectors.getFilter);\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getContacts);\r\n\r\n  return (\r\n    <>\r\n      {contacts.length > 1 && (\r\n        <label>\r\n          Find contact by name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={value}\r\n            onChange={event =>\r\n              dispatch(contactsActions.changeFilter(event.target.value))\r\n            }\r\n          />\r\n        </label>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ContactList from '../../components/ContactList';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport Filter from '../../components/Filter';\r\nimport { contactsOperations } from '../../redux/contact';\r\n// import s from './ContactsView.module.css';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}